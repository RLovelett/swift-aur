From ebbae91db7b1372263d56cb0edf7feb18a279634 Mon Sep 17 00:00:00 2001
From: Ryan Lovelett <ryan@lovelett.me>
Date: Sat, 19 Dec 2015 16:56:32 -0500
Subject: [PATCH] Fix linker not finding pthreads and dl

On Arch linux the linker was not seeing the `-lpthread` or `-ldl` linker
flags. This patch resolves it by specifically seperating link libraries
from linker flags returned by _add_variant_link_flags method. Then
applying the link libraries using CMake's target_link_libraries
function.
---
 cmake/modules/AddSwift.cmake | 31 ++++++++++++++++++++-----------
 1 file changed, 20 insertions(+), 11 deletions(-)

diff --git a/cmake/modules/AddSwift.cmake b/cmake/modules/AddSwift.cmake
index 9af22f6..4f6cd76 100644
--- a/cmake/modules/AddSwift.cmake
+++ b/cmake/modules/AddSwift.cmake
@@ -139,7 +139,8 @@ function(_add_variant_swift_compile_flags
 endfunction()
 
 function(_add_variant_link_flags
-    sdk arch build_type enable_assertions result_var_name)
+    sdk arch build_type enable_assertions
+    link_libs_var_name link_flags_var_name)
 
   if("${sdk}" STREQUAL "")
     message(FATAL_ERROR "Should specify an SDK")
@@ -149,24 +150,26 @@ function(_add_variant_link_flags
     message(FATAL_ERROR "Should specify an architecture")
   endif()
 
-  set(result ${${result_var_name}})
+  set(link_libs ${${link_libs_var_name}})
+  set(link_flags ${${link_flags_var_name}})
 
   _add_variant_c_compile_link_flags(
       "${sdk}"
       "${arch}"
       "${build_type}"
       "${enable_assertions}"
-      result)
+      link_flags)
 
   if("${sdk}" STREQUAL "LINUX")
-    list(APPEND result "-lpthread" "-ldl")
+    list(APPEND link_libs "-lpthread" "-ldl")
   elseif("${sdk}" STREQUAL "FREEBSD")
     # No extra libraries required.
   else()
-    list(APPEND result "-lobjc")
+    list(APPEND link_libs "-lobjc")
   endif()
 
-  set("${result_var_name}" "${result}" PARENT_SCOPE)
+  set("${link_libs_var_name}" "${link_libs}" PARENT_SCOPE)
+  set("${link_flags_var_name}" "${link_flags}" PARENT_SCOPE)
 endfunction()
 
 # Look up extra flags for a module that matches a regexp.
@@ -1033,6 +1036,7 @@ function(_add_swift_library_single target name)
   # Don't set PROPERTY COMPILE_FLAGS or LINK_FLAGS directly.
   set(c_compile_flags ${SWIFTLIB_SINGLE_C_COMPILE_FLAGS})
   set(link_flags ${SWIFTLIB_SINGLE_LINK_FLAGS})
+  set(link_libs)
 
   # Add variant-specific flags.
   if(SWIFTLIB_SINGLE_IS_STDLIB)
@@ -1053,7 +1057,7 @@ function(_add_swift_library_single target name)
       "${SWIFTLIB_SINGLE_ARCHITECTURE}"
       "${build_type}"
       "${enable_assertions}"
-      link_flags)
+      link_libs link_flags)
 
   # Handle gold linker flags for shared libraries.
   if(SWIFT_ENABLE_GOLD_LINKER AND SWIFTLIB_SINGLE_SHARED)
@@ -1119,7 +1123,8 @@ function(_add_swift_library_single target name)
   set_property(TARGET "${target}" APPEND_STRING PROPERTY
     LINK_FLAGS " ${link_flags} -L${SWIFTLIB_DIR}/${SWIFTLIB_SINGLE_SUBDIR} -L${SWIFT_NATIVE_SWIFT_TOOLS_PATH}/../lib/swift/${SWIFTLIB_SINGLE_SUBDIR} -L${SWIFT_NATIVE_SWIFT_TOOLS_PATH}/../lib/swift/${SWIFT_SDK_${SWIFTLIB_SINGLE_SDK}_LIB_SUBDIR}")
   target_link_libraries("${target}" PRIVATE
-      ${SWIFTLIB_SINGLE_PRIVATE_LINK_LIBRARIES})
+      ${SWIFTLIB_SINGLE_PRIVATE_LINK_LIBRARIES}
+      ${link_libs})
   if(${SWIFTLIB_SINGLE_INTERFACE_LINK_LIBRARIES})
     message(FATAL_ERROR "${SWIFTLIB_SINGLE_INTERFACE_LINK_LIBRARIES}")
   endif()
@@ -1605,6 +1610,7 @@ function(_add_swift_executable_single name)
   # Determine compiler flags.
   set(c_compile_flags)
   set(link_flags)
+  set(link_libs)
 
   # Add variant-specific flags.
   _add_variant_c_compile_flags(
@@ -1620,7 +1626,7 @@ function(_add_swift_executable_single name)
       "${CMAKE_BUILD_TYPE}"
       "${LLVM_ENABLE_ASSERTIONS}"
       FALSE
-      link_flags)
+      link_libs link_flags)
 
   list(APPEND link_flags
       "-L${SWIFTLIB_DIR}/${SWIFT_SDK_${SWIFTEXE_SINGLE_SDK}_LIB_SUBDIR}")
@@ -1699,7 +1705,9 @@ function(_add_swift_executable_single name)
       PROPERTIES
       HEADER_FILE_ONLY true)
 
-  target_link_libraries("${name}" ${SWIFTEXE_SINGLE_LINK_LIBRARIES})
+  target_link_libraries("${name}"
+    ${SWIFTEXE_SINGLE_LINK_LIBRARIES}
+    ${link_libs})
   swift_common_llvm_config("${name}" ${SWIFTEXE_SINGLE_COMPONENT_DEPENDS})
 
   set_target_properties(${name}
@@ -1864,13 +1872,14 @@ function(add_swift_llvm_loadable_module name)
       c_compile_flags)
 
   set(link_flags)
+  set(link_libs)
   _add_variant_link_flags(
       "${sdk}"
       "${arch}"
       "${CMAKE_BUILD_TYPE}"
       "${LLVM_ENABLE_ASSERTIONS}"
       FALSE
-      link_flags)
+      link_libs link_flags)
 
   # Convert variables to space-separated strings.
   _list_escape_for_shell("${c_compile_flags}" c_compile_flags)
-- 
2.6.4

